rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin() {
      return request.auth.uid != null &&
        get(/databases/$(database)/documents/members/$(request.auth.uid)).data.isAdmin == true;
    }
    function isOwner(uid) {
      return request.auth.uid != null && request.auth.uid == uid;
    }
    // member 데이터 유효성 검사
    function isValidMember(uid) {
      return (
        request.resource.data.uid == uid &&
        request.resource.data.isAdmin == false &&
        request.resource.data.email is string &&
        request.resource.data.name is string &&
        request.resource.data.photoURL is string &&
        request.resource.data.point is int &&
        request.resource.data.team is string
      );
    }
    match /games/{gameId} {
      allow read: if true;
      allow write: if isAdmin();

      match /members/{logId} {
        allow read: if true;
        allow delete: if isOwner(resource.data.uid);
        allow create, update: if false;
      }
    }
    match /members/{memberId} {
      allow read: if true;
      allow create: if (
          isValidMember(memberId) &&
          request.resource.data.point >= 0
        );
      allow delete: if false;
      allow update: if (
          isValidMember(memberId) &&
          request.resource.data.point >= 0
        );
      // allow update: if isOwner(memberId) && request.resource.data.keys().hasAll(['name', 'photoURL']);
      
      match /games/{logId} {
        allow read: if true;
        allow delete: if isOwner(memberId);
        allow create, update: if false;
      }
    }
  }
}